// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name VoltFramework
import DeveloperToolsSupport
import Foundation
import Network
import SafariServices
import Swift
import SwiftUI
import UIKit
@_exported import VoltFramework
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum HttpMethod : Swift.String {
  case get
  case post
  case put
  case patch
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HttpHeader : Swift.String {
  case contentType
  case authorization
  case userAgent
  case SAAsessionID
  case urlencoded
  case jsonHeader
  case bearerKey
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VoltHomeViewController : VoltFramework.BaseViewController, SafariServices.SFSafariViewControllerDelegate, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor @preconcurrency @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency public var voltWebView: WebKit.WKWebView!
  @_Concurrency.MainActor @preconcurrency public static var authToken: Swift.String?
  @_Concurrency.MainActor @preconcurrency public static var platformCode: Swift.String?
  @_Concurrency.MainActor @preconcurrency public init(authToken: Swift.String, platformCode: Swift.String, hideNavigationBar: Swift.Bool, exitCallback: ((Swift.String) -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc public func safariViewControllerDidFinish(_ controller: SafariServices.SFSafariViewController)
  @_Concurrency.MainActor @preconcurrency @objc public func safariViewController(_ controller: SafariServices.SFSafariViewController, didCompleteInitialLoad didLoadSuccessfully: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func safariViewController(_ controller: SafariServices.SFSafariViewController, initialLoadDidRedirectTo URL: Foundation.URL)
  @objc deinit
}
extension VoltFramework.VoltHomeViewController : WebKit.WKUIDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
extension VoltFramework.VoltHomeViewController : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func webView(_ webView: WebKit.WKWebView, shouldPreviewElement elementInfo: WebKit.WKContextMenuElementInfo) -> Swift.Bool
}
public class VoltSDKContainer {
  public init(voltInstance: VoltFramework.VoltInstance? = nil)
  public static func FaqClicked()
  public static func logout()
  public static func preCreateApplication(dob: Swift.String, email: Swift.String, panNumber: Swift.String, mobileNumber: Swift.Int, callback: ((_ response: VoltFramework.APIResponse?) -> Swift.Void)?)
  @objc deinit
}
public struct APIResponse : Swift.Codable {
  public var customerAccountId: Swift.String?
  public var message: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VOLTENV : Swift.CustomStringConvertible {
  case STAGING
  case PRODUCTION
  public var description: Swift.String {
    get
  }
  public static func == (a: VoltFramework.VOLTENV, b: VoltFramework.VOLTENV) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class VoltInstance {
  public init(voltEnv: VoltFramework.VOLTENV? = nil, partner_platform: Swift.String?, primary_color: Swift.String? = nil, secondary_color: Swift.String? = nil, ref: Swift.String? = nil, ssoToken: Swift.String? = "", customerCode: Swift.String? = "", target: Swift.String? = "")
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class BaseViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VoltFramework.HttpMethod : Swift.Equatable {}
extension VoltFramework.HttpMethod : Swift.Hashable {}
extension VoltFramework.HttpMethod : Swift.RawRepresentable {}
extension VoltFramework.HttpHeader : Swift.Equatable {}
extension VoltFramework.HttpHeader : Swift.Hashable {}
extension VoltFramework.HttpHeader : Swift.RawRepresentable {}
extension VoltFramework.VOLTENV : Swift.Equatable {}
extension VoltFramework.VOLTENV : Swift.Hashable {}
